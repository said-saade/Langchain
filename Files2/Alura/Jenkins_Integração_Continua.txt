-- Atraves do Vagrant criamos toda a estrutura da maquina virtual, e declaramos no Vagrantfile a instalaçao do mysql.
-- A instação do jenkins,docker e github, foi atraves de shellcripts;
-- Depois disso configuramos uma conta no github server, e publicamos um codigo a partir da nossa maquina virtual;
-- Depois criamos uma conta no jenkins, e configuramos ela para monitorar todas as alterações no github para comitar a atualiazação do codigo;
-- Pelo jenkins, conseguimos criar uma imagem do docker, sem ter que executar o comando na linha de comando
-- Pelo jenkins criamos todo o workflow de deploy do nosso codigo. Na ferramenta grafica, criamos os passos para coletar as atualiza~çoes do github,
realizar o deploy em dev, realizar o deploy em produção, utilizar o slack para notificar outros desenvolvedores que estao utilizando esse branch de que houve uma alteração, e por ultimo temos o SonarQube, para inspeção contínua da qualidade do código, executar revisões automáticas com análise estática do código para detectar bugs, odores de código e vulnerabilidades de segurança em mais de 20 linguagens de programação. Pense em um BPEL com todos esses passos a serem executados...é isso o que o Jenkins faz
-- Em um video no youtube que assisti sobre o Jenkins após o curso da Alura, mostrou o desenvolvedor criando um job para realizar para compilar o codigo, um outro job para realizar a validação de vulnerabilidade do codigo(e um comando do Maven(plugin) nativo no Jenkints), e um terceiro e ultimo job para realizar um teste unitario. Após isso, é mostrado uma tela, onde é criado um pipeline. Esse pipeline é como se fosse um BPEL com as 3 caixinhas criadas de forma sequencial, e para a sucessora ser executada voce configura a pre-dependencia entre elas, assim, quando a compilação for realizada com sucesso, a analise da vulnerabilidade do codigo for processada com sucesso, o teste unitario for processado com sucesso, voce pode criar uma 4 caicinha para fazer o deploy em teste, uma 5 caixinha para a produção e assim sucessivamente. Isso é o pipeline, um mero "orquestrador".